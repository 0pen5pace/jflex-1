/* The following code was generated by JFlex 1.4.3 on 9/16/18 12:21 PM */

package jflex;

import java.util.SortedSet;
import java.util.TreeSet;

/**
 * Scans the Unicode.org data file format for LineBreak-X.txt for Unicode
 * version 3.0, populating unicodeVersion.propertyValueIntervals and
 * unicodeVersion.usedPropertyValueAliases.  From Unicode version 3.1 onward,
 * the LineBreak(-X.X.X).txt file format changed to the common enumerated
 * property format, which can be scanned using the grammar in 
 * EnumeratedPropertyFileScanner.flex.
 */

public final class ArchaicLineBreakScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int END_RANGE = 4;
  public static final int YYINITIAL = 0;
  public static final int COMMENT_LINE = 8;
  public static final int PROPERTY_VALUE = 6;
  public static final int TWO_LINE_RANGE = 10;
  public static final int BEGIN_RANGE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\3\2\0\1\4\22\0\1\7\2\0\1\6\10\0"+
    "\1\12\3\0\12\1\1\0\1\5\1\10\1\0\1\11\2\0\5\1"+
    "\1\13\5\0\1\20\24\0\1\21\5\1\2\0\1\14\10\0\1\15"+
    "\1\16\1\17\uff8b\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\1\2\4\0\3\1\1\3\1\4\1\5"+
    "\2\0\1\2\12\0\1\2\1\0\2\6\5\0\1\6"+
    "\3\0\1\7\1\0\1\10\1\6\2\0\1\7\1\0"+
    "\1\10\3\0\1\7\1\0\1\10\2\6\4\0\2\6"+
    "\4\0\2\6\4\0\2\6\4\0\2\6\4\0\1\6"+
    "\2\11\6\0\2\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\22\0\44\0\66\0\110\0\132\0\154\0\176"+
    "\0\220\0\22\0\242\0\264\0\22\0\306\0\330\0\352"+
    "\0\22\0\374\0\u010e\0\u0120\0\u0132\0\u0144\0\u0156\0\u0168"+
    "\0\u017a\0\u018c\0\u019e\0\352\0\u01b0\0\u01c2\0\u01d4\0\u01e6"+
    "\0\u01f8\0\u020a\0\u021c\0\u022e\0\u0240\0\u0252\0\u0264\0\u0276"+
    "\0\u0288\0\u029a\0\u02ac\0\u02be\0\u02d0\0\u02e2\0\u02f4\0\u0306"+
    "\0\u0318\0\u032a\0\u033c\0\u034e\0\22\0\u0360\0\22\0\u0372"+
    "\0\u0384\0\u0396\0\u03a8\0\u03ba\0\u03cc\0\u03de\0\u03f0\0\u0402"+
    "\0\u0414\0\u0426\0\u0438\0\u044a\0\u045c\0\u046e\0\u0480\0\u0492"+
    "\0\u04a4\0\u04b6\0\u04c8\0\u04da\0\u04ec\0\u04fe\0\u0510\0\u0522"+
    "\0\u0534\0\u0546\0\u0558\0\u056a\0\u057c\0\u058e\0\22\0\u05a0"+
    "\0\u05b2\0\u05c4\0\u05d6\0\u05e8\0\u05fa\0\u060c\0\22\0\u061e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\10\1\11\1\12\1\13\1\14\1\15\1\11"+
    "\3\0\1\10\5\0\1\10\22\0\2\16\1\17\2\0"+
    "\1\20\1\0\1\17\12\16\3\4\1\21\16\4\1\0"+
    "\1\22\1\23\2\0\1\24\1\0\1\23\3\0\1\22"+
    "\5\0\1\22\2\25\6\0\12\25\3\0\1\26\1\27"+
    "\16\0\1\30\11\0\1\30\5\0\1\30\2\0\1\11"+
    "\1\12\1\13\1\14\1\15\1\11\15\0\1\12\20\0"+
    "\1\14\4\0\1\14\12\0\2\16\1\31\2\0\1\32"+
    "\1\0\1\33\12\16\2\0\1\17\2\0\1\20\1\0"+
    "\1\17\12\0\3\20\1\21\1\34\15\20\1\0\1\35"+
    "\11\0\1\35\5\0\1\35\2\0\1\23\2\0\1\24"+
    "\1\0\1\23\12\0\2\36\1\24\4\0\1\24\1\37"+
    "\11\36\2\25\5\0\1\6\12\25\2\0\1\27\1\0"+
    "\1\27\2\0\1\27\1\0\1\40\12\0\1\27\4\0"+
    "\1\27\1\0\1\40\11\0\1\41\11\0\1\41\5\0"+
    "\1\41\2\0\1\31\2\0\1\32\1\0\1\31\14\0"+
    "\1\32\4\0\1\32\1\42\11\0\2\16\1\31\2\0"+
    "\1\32\1\0\1\31\12\16\1\0\1\43\11\0\1\43"+
    "\5\0\1\43\2\36\5\0\1\44\12\36\2\45\5\46"+
    "\1\47\1\45\2\36\7\45\17\0\1\50\3\0\1\51"+
    "\11\0\1\51\5\0\1\51\11\52\1\0\10\52\1\0"+
    "\1\53\11\0\1\53\5\0\1\53\2\36\6\0\12\36"+
    "\2\45\5\46\1\47\1\45\1\36\1\54\7\45\11\46"+
    "\1\0\1\55\7\46\2\45\6\46\1\45\1\36\1\54"+
    "\7\45\16\0\1\56\4\0\1\57\11\0\1\57\5\0"+
    "\1\57\11\52\1\0\1\60\7\52\1\0\1\61\11\0"+
    "\1\61\5\0\1\61\2\36\5\0\1\62\12\36\7\0"+
    "\1\63\27\0\1\64\5\0\1\65\11\0\1\65\5\0"+
    "\1\65\7\52\1\66\1\52\1\0\1\60\7\52\1\0"+
    "\1\67\11\0\1\67\5\0\1\67\2\36\6\0\3\36"+
    "\1\70\4\36\1\71\1\36\13\0\1\72\4\0\1\73"+
    "\15\0\1\74\5\0\11\52\1\0\1\60\1\75\6\52"+
    "\2\36\5\0\1\44\4\36\1\76\7\36\5\0\1\44"+
    "\11\36\1\77\14\0\1\100\26\0\1\101\13\0\1\102"+
    "\6\0\11\52\1\0\1\60\1\52\1\103\5\52\2\36"+
    "\5\0\1\44\5\36\1\104\6\36\5\0\1\44\6\36"+
    "\1\105\3\36\15\0\1\106\22\0\1\107\12\0\1\110"+
    "\12\0\11\52\1\0\1\60\2\52\1\111\4\52\2\36"+
    "\5\0\1\44\6\36\1\112\5\36\5\0\1\44\7\36"+
    "\1\113\2\36\16\0\1\114\22\0\1\115\14\0\1\116"+
    "\7\0\11\52\1\0\1\60\3\52\1\117\3\52\2\36"+
    "\5\0\1\44\7\36\1\120\4\36\5\0\1\44\1\36"+
    "\1\121\10\36\17\0\1\122\13\0\1\123\10\0\11\124"+
    "\1\0\10\124\11\52\1\0\1\60\4\52\1\125\2\52"+
    "\2\36\5\0\1\44\1\36\1\126\12\36\1\123\1\127"+
    "\1\130\2\0\1\131\12\36\11\0\1\132\12\0\1\123"+
    "\1\127\1\130\2\0\1\123\12\0\10\124\1\133\1\0"+
    "\10\124\11\52\1\134\1\60\7\52\2\36\1\132\1\12"+
    "\1\13\2\0\1\135\12\36\3\0\1\127\16\0\2\36"+
    "\1\123\1\127\1\130\2\0\1\123\12\36\2\0\1\132"+
    "\1\12\1\13\2\0\1\132\12\0\2\124\1\133\2\124"+
    "\1\136\1\124\2\133\1\0\10\124\2\0\1\134\1\137"+
    "\1\140\2\0\1\134\12\0\2\36\1\132\1\12\1\13"+
    "\2\0\1\132\12\36\2\124\1\136\4\124\1\136\1\133"+
    "\1\0\10\124\3\0\1\137\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1584];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\10\1\0\1\1\4\0\1\1\1\11\2\1"+
    "\1\11\1\1\2\0\1\11\3\0\1\1\6\0\1\1"+
    "\1\0\2\1\5\0\1\1\3\0\1\1\1\0\2\1"+
    "\2\0\1\1\1\0\1\1\3\0\1\11\1\0\1\11"+
    "\2\1\4\0\2\1\4\0\2\1\4\0\2\1\4\0"+
    "\2\1\4\0\1\1\1\11\1\1\5\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  UnicodeVersion unicodeVersion;
  SortedSet<NamedRange> intervals = new TreeSet<NamedRange>();
  String defaultPropertyValue = "XX";
  String propertyName = "Line_Break";
  String propertyValue;
  int start;
  int end;
  
  public void addPropertyValueIntervals() {
    int prevEnd = -1;
    int prevStart = -1;
    String prevValue = "";
    for (NamedRange interval : intervals) {
      if (interval.start > prevEnd + 1) {
        // Unassigned code points get the default property value, e.g. "Unknown"
        unicodeVersion.addInterval
          (propertyName, defaultPropertyValue, prevEnd + 1, interval.start - 1);
      }
      if (prevEnd == -1) {
        prevStart = interval.start;
        prevValue = interval.name;
      } else if (interval.start > prevEnd + 1 || ! interval.name.equals(prevValue)) {
        unicodeVersion.addInterval(propertyName, prevValue, prevStart, prevEnd);
        prevStart = interval.start;
        prevValue = interval.name;
      }
      prevEnd = interval.end;
    }

    // Add final default property value interval, if necessary
    if (prevEnd < unicodeVersion.maximumCodePoint) {
      unicodeVersion.addInterval(propertyName, defaultPropertyValue, 
                                 prevEnd + 1, unicodeVersion.maximumCodePoint);
    }
    
    // Add final named interval
    unicodeVersion.addInterval(propertyName, prevValue, prevStart, prevEnd);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ArchaicLineBreakScanner(java.io.Reader in, UnicodeVersion unicodeVersion) {
    this.unicodeVersion = unicodeVersion;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ArchaicLineBreakScanner(java.io.InputStream in, UnicodeVersion unicodeVersion) {
    this(new java.io.InputStreamReader(in), unicodeVersion);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 66) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int scan() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { intervals.add(new NamedRange(start, end, propertyValue));
                                                       yybegin(YYINITIAL);
          }
        case 11: break;
        case 3: 
          { yybegin(PROPERTY_VALUE);
          }
        case 12: break;
        case 10: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { propertyValue = yytext(); yybegin(TWO_LINE_RANGE);
          }
        case 13: break;
        case 7: 
          { start = end = Integer.parseInt(yytext(), 16);
          }
        case 14: break;
        case 5: 
          { intervals.add(new NamedRange(start, end, yytext()));
          }
        case 15: break;
        case 6: 
          { /* Ignore second property value mention */
          }
        case 16: break;
        case 8: 
          { end = Integer.parseInt(yytext(), 16);
          }
        case 17: break;
        case 2: 
          { yybegin(YYINITIAL);
          }
        case 18: break;
        case 1: 
          { 
          }
        case 19: break;
        case 4: 
          { yybegin(COMMENT_LINE);
          }
        case 20: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              addPropertyValueIntervals(); return 0;
            }
            case 97: break;
            case PROPERTY_VALUE: {
              addPropertyValueIntervals(); return 0;
            }
            case 98: break;
            default:
            return YYEOF;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

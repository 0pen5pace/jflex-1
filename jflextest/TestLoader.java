/* The following code was generated by JFlex 1.5.1 */

package jflextest;

import java.util.*;
import jflex.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/Users/regis/Projects/jflex/testsuite/jflex-testsuite-maven-plugin/src/main/jflex/TestLoader.flex</tt>
 */
class TestLoader {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DESCR = 2;
  public static final int JFLEXCMD = 4;
  public static final int JAVAC_EXTRA_FILES = 6;
  public static final int LINELIST = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\31\1\2\2\0\1\1\22\0\1\10\1\0\1\33\1\32"+
    "\11\0\1\26\2\0\12\35\1\7\41\0\1\34\4\0\1\4\1\0"+
    "\1\13\1\11\1\6\1\22\1\30\1\0\1\15\1\21\1\0\1\23"+
    "\1\5\1\3\1\20\1\16\1\0\1\14\1\12\1\17\1\27\1\25"+
    "\1\0\1\24\uff87\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\1\1\2\5\1\1\3\3\4"+
    "\1\5\2\6\1\7\2\5\2\10\2\11\1\12\1\13"+
    "\26\0\1\14\1\15\2\16\16\0\1\17\15\0\1\20"+
    "\42\0\1\21\5\0\1\22\35\0\1\23\1\0\1\24"+
    "\5\0\1\25\1\26\1\27\5\0\1\30\1\31\1\0"+
    "\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\322\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4"+
    "\0\u01c2\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276\0\322"+
    "\0\u0294\0\u02b2\0\u02d0\0\u02ee\0\322\0\u030c\0\322\0\u032a"+
    "\0\u0348\0\u0366\0\322\0\u0384\0\u03a2\0\u03c0\0\u03de\0\u03fc"+
    "\0\u041a\0\u0438\0\u0456\0\u023a\0\u0474\0\u0492\0\u04b0\0\u04ce"+
    "\0\u04ec\0\u050a\0\u0528\0\u0546\0\u0564\0\u0582\0\u05a0\0\322"+
    "\0\322\0\u05be\0\322\0\u05dc\0\u05fa\0\u0618\0\u0636\0\u0654"+
    "\0\u0672\0\u0690\0\u06ae\0\u06cc\0\u06ea\0\u0708\0\u0726\0\u0744"+
    "\0\u0762\0\u0780\0\u079e\0\u07bc\0\u07da\0\u07f8\0\u0816\0\u0834"+
    "\0\u0852\0\u0870\0\u088e\0\u08ac\0\u08ca\0\u08e8\0\u0906\0\322"+
    "\0\u0924\0\u0942\0\u0960\0\u097e\0\u099c\0\u09ba\0\u09d8\0\u09f6"+
    "\0\u0a14\0\u0a32\0\u0a50\0\u0a6e\0\u0a8c\0\u0aaa\0\u0ac8\0\u0ae6"+
    "\0\u0b04\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\u0b9a\0\u0bb8\0\u0bd6"+
    "\0\u0bf4\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c\0\u0c8a\0\u0ca8\0\u0cc6"+
    "\0\u0ce4\0\u0d02\0\322\0\u0d20\0\u0d3e\0\u0d5c\0\u0d7a\0\u0d98"+
    "\0\u0ce4\0\u0db6\0\u0dd4\0\u0df2\0\u0e10\0\u0e2e\0\u0e4c\0\u0e6a"+
    "\0\u0e88\0\u0ea6\0\u0ec4\0\u0ee2\0\u0f00\0\u0f1e\0\u0f3c\0\u0f5a"+
    "\0\u0f78\0\u0f96\0\u0fb4\0\u0fd2\0\u0ff0\0\u100e\0\u102c\0\u104a"+
    "\0\u1068\0\u1086\0\u10a4\0\u10c2\0\u10e0\0\u10fe\0\322\0\u111c"+
    "\0\322\0\u113a\0\u1158\0\u1176\0\u1194\0\u11b2\0\322\0\322"+
    "\0\u11d0\0\u11ee\0\u120c\0\u122a\0\u1248\0\u1266\0\322\0\u1284"+
    "\0\u12a2\0\u12c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\4\10\1\14\1\15\1\10"+
    "\1\16\1\10\1\17\2\10\1\20\1\21\7\10\1\14"+
    "\1\22\3\10\1\23\1\24\1\25\33\23\1\26\1\27"+
    "\1\30\5\26\1\31\20\26\1\31\1\26\1\32\1\33"+
    "\2\26\1\34\1\35\5\26\1\31\20\26\1\31\1\26"+
    "\1\32\1\33\1\26\1\10\1\36\1\37\5\10\1\40"+
    "\20\10\1\40\3\10\1\41\1\0\1\42\1\43\43\0"+
    "\1\44\65\0\1\12\37\0\1\45\41\0\1\14\20\0"+
    "\1\14\12\0\1\46\47\0\1\47\20\0\1\50\61\0"+
    "\1\51\12\0\1\52\15\0\1\53\13\0\1\22\2\0"+
    "\33\22\1\23\2\0\33\23\1\54\1\0\1\25\4\54"+
    "\1\55\1\0\26\54\2\0\4\54\1\55\1\0\25\54"+
    "\1\26\2\0\5\26\1\0\20\26\1\0\4\26\2\0"+
    "\1\30\43\0\1\31\20\0\1\31\4\0\1\32\2\56"+
    "\5\32\1\56\20\32\1\56\1\32\1\26\2\32\1\26"+
    "\2\0\5\26\1\57\20\26\1\57\4\26\2\0\1\35"+
    "\35\0\1\37\43\0\1\40\20\0\1\40\41\0\1\41"+
    "\2\0\1\43\42\0\1\60\33\0\1\61\42\0\1\62"+
    "\30\0\1\63\46\0\1\64\36\0\1\65\43\0\1\66"+
    "\33\0\1\67\12\0\1\54\2\0\4\54\1\55\1\70"+
    "\25\54\33\56\1\71\2\56\1\0\1\72\1\73\5\0"+
    "\1\57\20\0\1\57\4\0\1\60\2\0\5\60\1\0"+
    "\25\60\6\0\1\74\42\0\1\75\27\0\1\76\57\0"+
    "\1\77\24\0\1\100\23\0\1\101\37\0\1\102\31\0"+
    "\1\73\42\0\1\103\42\0\1\104\41\0\1\105\34\0"+
    "\1\106\45\0\1\107\21\0\1\110\46\0\1\111\21\0"+
    "\1\112\42\0\1\113\23\0\1\114\60\0\1\115\26\0"+
    "\1\116\44\0\1\117\16\0\1\120\16\0\1\121\7\0"+
    "\1\112\2\0\33\112\16\0\1\122\45\0\1\123\31\0"+
    "\1\124\41\0\1\125\15\0\1\126\13\0\1\127\23\0"+
    "\1\130\36\0\1\131\10\0\1\132\32\0\1\133\33\0"+
    "\1\134\35\0\1\135\42\0\1\136\37\0\1\137\15\0"+
    "\1\140\46\0\1\141\24\0\1\142\46\0\1\143\23\0"+
    "\1\144\55\0\1\145\27\0\1\146\37\0\1\147\33\0"+
    "\1\150\42\0\1\151\30\0\1\152\40\0\1\153\33\0"+
    "\1\154\25\0\1\155\52\0\1\156\26\0\1\157\44\0"+
    "\1\160\34\0\1\161\36\0\1\162\15\0\1\163\61\0"+
    "\1\164\34\0\1\165\15\0\1\166\33\0\1\167\40\0"+
    "\1\170\35\0\1\171\35\0\1\172\35\0\1\173\45\0"+
    "\1\174\24\0\1\175\55\0\1\176\35\0\1\177\17\0"+
    "\1\200\35\0\1\201\35\0\1\202\53\0\1\203\12\0"+
    "\1\204\40\0\1\205\51\0\1\206\23\0\1\200\6\0"+
    "\1\207\2\0\1\210\23\0\1\202\6\0\1\211\2\0"+
    "\1\212\35\0\1\213\26\0\1\214\25\0\1\215\47\0"+
    "\1\216\34\0\1\217\25\0\1\220\45\0\1\221\25\0"+
    "\1\222\46\0\1\223\40\0\1\224\30\0\1\225\45\0"+
    "\1\226\41\0\1\227\31\0\1\230\41\0\1\231\31\0"+
    "\1\232\35\0\1\233\23\0\1\234\44\0\1\235\23\0"+
    "\1\236\35\0\1\237\41\0\1\240\31\0\1\241\41\0"+
    "\1\242\31\0\1\243\44\0\1\244\31\0\1\245\36\0"+
    "\1\246\31\0\1\247\35\0\1\250\36\0\1\251\31\0"+
    "\1\252\47\0\1\253\27\0\1\254\26\0\1\251\2\0"+
    "\33\251\30\0\1\255\10\0\1\256\42\0\1\257\34\0"+
    "\1\260\56\0\1\261\5\0\1\260\2\0\33\260\7\0"+
    "\1\262\26\0\1\262\2\0\33\262";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4830];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\15\1\1\11\4\1\1\11"+
    "\1\1\1\11\3\1\1\11\14\0\1\1\7\0\2\11"+
    "\1\1\1\11\16\0\1\1\15\0\1\11\42\0\1\11"+
    "\5\0\1\1\35\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\1\5\0\1\11\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private StringBuilder buffer = new StringBuilder();
  private TestCase test = new TestCase();
  private List<String> cmdLine;
  private List<Integer> lineList;

  // public TestCase getTestCase() { return test; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TestLoader(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TestLoader(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 86) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TestCase load() throws java.io.IOException, LoadException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new LoadException("Illegal character: ["+yytext()+"]");
          }
        case 27: break;
        case 2: 
          { /* ignore newline and whitespace */
          }
        case 28: break;
        case 3: 
          { /* ignore comments */
          }
        case 29: break;
        case 4: 
          { buffer.append(yytext());
          }
        case 30: break;
        case 5: 
          { cmdLine.add(yytext());
          }
        case 31: break;
        case 6: 
          { test.setJflexCmdln(cmdLine); yybegin(YYINITIAL);
          }
        case 32: break;
        case 7: 
          { /* ignore whitespace */
          }
        case 33: break;
        case 8: 
          { test.setJavacExtraFiles(cmdLine); yybegin(YYINITIAL);
          }
        case 34: break;
        case 9: 
          { yybegin(YYINITIAL);
          }
        case 35: break;
        case 10: 
          { 
          }
        case 36: break;
        case 11: 
          { lineList.add(new Integer(yytext()));
          }
        case 37: break;
        case 12: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { test.setDescription(buffer.toString()); yybegin(YYINITIAL);
          }
        case 38: break;
        case 13: 
          { cmdLine.add(yytext().substring(1,yylength()-1)); 
                        /* quoted cmdline options */
          }
        case 39: break;
        case 14: 
          { /* allow line continuation with \ */
          }
        case 40: break;
        case 15: 
          { test.setTestName(yytext().substring(6).trim());
          }
        case 41: break;
        case 16: 
          { cmdLine = new ArrayList<String>(); yybegin(JFLEXCMD);
          }
        case 42: break;
        case 17: 
          { yybegin(DESCR);
          }
        case 43: break;
        case 18: 
          { lineList = new ArrayList<Integer>(); 
                        test.setJFlexDiff(lineList); 
                        yybegin(LINELIST);
          }
        case 44: break;
        case 19: 
          { test.setExpectJavacFail(true);
          }
        case 45: break;
        case 20: 
          { test.setExpectJFlexFail(true);
          }
        case 46: break;
        case 21: 
          { test.setExpectJavacFail(false);
          }
        case 47: break;
        case 22: 
          { test.setExpectJFlexFail(false);
          }
        case 48: break;
        case 23: 
          { test.setCommonInputFile(yytext().substring(18).trim());
          }
        case 49: break;
        case 24: 
          { cmdLine = new ArrayList<String>(); yybegin(JAVAC_EXTRA_FILES);
          }
        case 50: break;
        case 25: 
          { test.setInputFileEncoding(yytext().substring(20).trim());
          }
        case 51: break;
        case 26: 
          { test.setOutputFileEncoding(yytext().substring(21).trim());
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return test;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
